{"version":3,"sources":["apptodos/todoData.js","apptodos/TodoItem.js","apptodos/TodoList.js","apptodos/AppTodos.js","App.js","serviceWorker.js","index.js"],"names":["todoData","id","title","completed","deleted","TodoItem","props","handleChange","className","type","name","checked","onChange","value","TodoList","useState","data","setData","event","target","prevData","map","item","parseInt","disTodoList","key","AppTodos","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAqBeA,EArBE,CACf,CACEC,GAAI,EACJC,MAAO,WACPC,WAAW,EACXC,SAAS,GAEX,CACEH,GAAI,EACJC,MAAO,aACPC,WAAW,EACXC,SAAS,GAEX,CACEH,GAAI,EACJC,MAAO,cACPC,WAAW,EACXC,SAAS,ICuBEC,EAtCE,SAACC,GAAW,IAEnBL,EAAgDK,EAAhDL,GAAIC,EAA4CI,EAA5CJ,MAAOC,EAAqCG,EAArCH,UAAWC,EAA0BE,EAA1BF,QAASG,EAAiBD,EAAjBC,aAEvC,OACE,yBAAKC,UAAU,aACb,2BACEC,KAAK,WACLC,KAAK,YACLT,GAAIA,EACJU,QAASR,EACTS,SAAUL,EACVC,UAAU,kBAEZ,2BACEC,KAAK,OACLC,KAAK,QACLT,GAAIA,EACJY,MAAOX,EACPU,SAAUL,EACVC,UAAWL,EAAY,6BAA+B,eAGxD,+BACE,2BACEM,KAAK,WACLC,KAAK,UACLT,GAAIA,EACJU,QAASP,EACTQ,SAAUL,EACVC,UAAU,WAEZ,0BAAMA,UAAU,8BAAhB,YCkBOM,EAhDE,WAAM,MAGKC,mBAASf,GAHd,mBAGbgB,EAHa,KAGPC,EAHO,KAMfV,EAAe,SAACW,GAAW,IAAD,EACcA,EAAMC,OAA1ClB,EADsB,EACtBA,GAAIQ,EADkB,EAClBA,KAAMC,EADY,EACZA,KAAMG,EADM,EACNA,MAAQF,EADF,EACEA,QAEhCM,GAAS,SAAAG,GAWP,OARgBA,EAASC,KAAI,SAAAC,GAMzB,OALEC,SAAStB,KAAQqB,EAAKrB,KAEtBqB,EAAK,CAACZ,IADC,aAATD,EACiBE,EACAE,GAEVS,SAOTE,EAAcR,EAAKK,KAAI,SAAAC,GAAS,IAC5BrB,EAAkCqB,EAAlCrB,GAAIC,EAA8BoB,EAA9BpB,MAAOC,EAAuBmB,EAAvBnB,UAAWC,EAAYkB,EAAZlB,QAE9B,OAAKA,EAUE,KATE,kBAAC,EAAD,CACLqB,IAAKxB,EACLA,GAAIA,EACJC,MAAOA,EACPC,UAAWA,EACXC,QAAUA,EACVG,aAAcA,OAMpB,OACE,6BACGiB,ICjCQE,EATE,WACf,OACE,yBAAKlB,UAAU,YACb,wCACA,kBAAC,EAAD,QCqBSmB,MAzBf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.270e4519.chunk.js","sourcesContent":["const todoData = [\n  {\n    id: 0,\n    title: 'Buy milk',\n    completed: false,\n    deleted: false\n  },\n  {\n    id: 1,\n    title: 'Do pushups',\n    completed: true,\n    deleted: false\n  },\n  {\n    id: 2,\n    title: 'Read a book',\n    completed: false,\n    deleted: false\n  }\n];\n\nexport default todoData;","import React from 'react';\n\nconst TodoItem = (props) => {\n\n  const { id, title, completed, deleted, handleChange } = props;\n  \n  return (\n    <div className='todo-item'>\n      <input\n        type='checkbox'\n        name='completed'\n        id={id}\n        checked={completed}\n        onChange={handleChange}\n        className='todo-checkbox'\n      />\n      <input\n        type='text'\n        name='title'\n        id={id}\n        value={title}\n        onChange={handleChange}\n        className={completed ? 'todo-title todo-title-done' : 'todo-title'}\n        />\n      \n      <label>\n        <input\n          type='checkbox'\n          name='deleted'\n          id={id}\n          checked={deleted}\n          onChange={handleChange}\n          className='hidden'\n        />\n        <span className='material-icons todo-delete'>close</span>\n      </label>\n    </div>\n  );\n};\n\nexport default TodoItem;","import React, { useState } from 'react';\nimport todoData from './todoData';\nimport TodoItem from './TodoItem';\n\nconst TodoList = () => {\n\n  // Set state\n  const [ data, setData ] = useState(todoData);\n\n  // Handle Change\n  const handleChange = (event) => {\n    const { id, type, name, value , checked } = event.target;\n\n    setData (prevData => {\n      // Loop and look for the right object to update, using ID\n      // Update the object accordingly\n      const newData = prevData.map(item => {\n        if (parseInt(id) === item.id) {\n          type === 'checkbox' ?\n            item[[name]] = checked :\n            item[[name]] = value;\n        }\n          return item;\n      })\n      return newData;\n    })\n  };\n\n  // For each todo item, render a <Todo Item /> component\n  const disTodoList = data.map(item => {\n    const { id, title, completed, deleted } = item;\n\n    if (!deleted) {\n      return <TodoItem\n        key={id}\n        id={id}\n        title={title}\n        completed={completed}\n        deleted ={deleted}\n        handleChange={handleChange}\n      />\n     }\n    return null;     \n  });\n\n  return (\n    <div>\n      {disTodoList}\n    </div>\n  );\n};\n\nexport default TodoList;","import React from 'react';\nimport './styleTodos.css';\n\nimport TodoList from './TodoList';\n\nconst AppTodos = () => {\n  return (\n    <div className='todo-app'>\n      <h1>My Todos</h1>\n      <TodoList />\n    </div>\n  );\n};\n\nexport default AppTodos;\n\n// [X] UI and CSS Styling\n// [X] Set up state\n// [X] Set up components to get data from state\n// [X] Set up handle change method, to update state\n// [ ] Delete --> Still buggy. What if I make it a button?\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport AppTodos from './apptodos/AppTodos';\n\nfunction App() {\n  return (\n    <AppTodos />\n\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //       Check out my todo app <a href='./app-todos/' className='App-link'>here</a>\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}